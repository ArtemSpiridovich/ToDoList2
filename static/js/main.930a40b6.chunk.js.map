{"version":3,"sources":["components/TodolistTask.module.css","components/Todolist.module.css","components/TodolistTitle.module.css","components/TodoListTask.js","components/TodoListTasks.js","components/TodoListFooter.js","components/TodoListTitle.js","components/AddNewItemForm.js","common/api.js","redux/reducer.js","components/TodoList.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["module","exports","deleteTask","todoListTask","todoListTaskDone","inputChange","content","tasks","titleTodolist","TodoListTask","onIsDoneChanged","e","status","currentTarget","checked","_this","props","changeStatus","task","onTitleChanged","setState","title","value","state","editMode","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","id","render","containerCssClass","concat","s","priority","react_default","a","createElement","className","type","onChange","onBlur","autoFocus","onClick","React","Component","TodoListTasks","tasksElements","map","components_TodoListTask","key","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","todolistName","onTodolistNameChanged","activatedEditMode","changeTodolist","onDelete","AddNewItemForm","error","onAddItemClick","newText","addItem","onKeyPress","classNameForInput","placeholder","titleButton","instance","axios","create","withCredentials","baseURL","headers","API-KEY","api","newTaskTitle","todolistId","post","get","taskId","obj","put","_objectSpread","delete","ADD_TASK","initialState","todolists","reducer","arguments","length","undefined","action","reducer_objectSpread","newTodolist","Object","toConsumableArray","filter","tl","t","newTask","todolistTitle","console","log","TodoList","addTask","addTaskT","newFilterValue","changeTaskThis","changeTaskTC","deleteTodolist","_this$props$tasks","components_TodoListTitle","components_AddNewItemForm","components_TodoListTasks","components_TodoListFooter","this","getTasks","ConnectedTodolist","connect","dispatch","then","res","data","item","addTaskac","allTasks","items","updateTaskac","resultCode","deleteTaskac","App","addTodoList","components_TodoList","getTodoList","ConnectedApp","todolist","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.930a40b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteTask\":\"TodolistTask_deleteTask__3KxyD\",\"todoListTask\":\"TodolistTask_todoListTask__1hOs-\",\"todoListTaskDone\":\"TodolistTask_todoListTaskDone__1OhvE\",\"inputChange\":\"TodolistTask_inputChange__3-C_h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Todolist_content__3JRCY\",\"tasks\":\"Todolist_tasks__3yVQ6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"TodolistTitle_content__3dyV5\",\"titleTodolist\":\"TodolistTitle_titleTodolist__32B2b\"};","import React from 'react';\nimport s from './TodolistTask.module.css';\n\nclass TodoListTask extends React.Component {\n\n    onIsDoneChanged = (e) => {\n        let status = e.currentTarget.checked ? 2 : 0;\n        this.props.changeStatus(this.props.task, status);\n    }\n\n    onTitleChanged = (e) => {\n        this.setState({\n            title: e.currentTarget.value\n        })\n    }\n\n    state = {\n        editMode: false,\n        title: this.props.task.title\n    }\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    }\n\n    deactivateEditMode= () => {\n        this.props.changeTitle(this.props.task, this.state.title)\n        this.setState({editMode: false});\n    }\n    onDeleteTask = () => {\n        this.props.deleteTask(this.props.task.id);\n    }\n    render = () => {\n        let containerCssClass = this.props.task.status ? `${s.todoListTaskDone}` : `${s.todoListTask}`;\n        let priority = '';\n        switch (this.props.task.priority) {\n            case 0:\n                priority = 'Low';\n                break;\n            case 1:\n                priority = 'Middle';\n                break;\n            case 2:\n                priority = 'High';\n                break;\n            case 3:\n                priority = 'Urgently';\n                break;\n            case 4:\n                priority = 'Later';\n                break;\n        }\n        return (\n                <div className={containerCssClass}>\n                    <input type=\"checkbox\" checked={this.props.task.status === 2}\n                           onChange={this.onIsDoneChanged}/>\n                    { this.state.editMode\n                        ? <input className={s.inputChange} onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true} value={this.state.title} />\n                        : <span onClick={this.activateEditMode}>{this.props.task.title}</span>\n                    }<span>,</span> <span>priority: {priority}</span> <button className={s.deleteTask} title='delete Task' onClick={this.onDeleteTask}>X</button>\n                </div>\n        );\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport '../App.css';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n\n        let tasksElements = this.props.tasks.map( task => <TodoListTask key={task.id} task={task}\n                                                                        changeStatus={this.props.changeStatus}\n                                                                        changeTitle={this.props.changeTitle}\n                                                                        deleteTask={this.props.deleteTask}\n                                                                        />);\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport '../App.css';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n        isHidden: false\n    }\n\n    onAllFilterClick = () => { this.props.changeFilter(\"All\"); }\n    onCompletedFilterClick = () => { this.props.changeFilter(\"Completed\"); }\n    onActiveFilterClick = () => { this.props.changeFilter(\"Active\"); }\n    onShowFiltersClick = () => { this.setState({isHidden: true}) }\n    onHideFiltersClick = () => { this.setState({isHidden: false}) }\n\n    render = () => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"otherButtons\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"otherButtons\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"otherButtons\";\n\n        return (\n            <div className=\"todoList-footer\">\n                <div>{!this.state.isHidden && <div>\n                    <button onClick={this.onAllFilterClick} className={classForAll}>All</button>\n                    <button onClick={this.onCompletedFilterClick} className={classForCompleted}>Completed</button>\n                    <button onClick={this.onActiveFilterClick} className={classForActive}>Active</button>\n                </div>\n                }</div>\n                { !this.state.isHidden && <span onClick={ this.onShowFiltersClick }>hide buttons</span> }\n                { this.state.isHidden && <span onClick={ this.onHideFiltersClick }>show buttons</span> }\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport '../App.css';\nimport s from './TodolistTitle.module.css'\n\nclass TodoListTitle extends React.Component {\n\n    state = {\n        editMode: false,\n        todolistName: this.props.title\n    }\n\n    onTodolistNameChanged = (e) => {\n        this.setState({\n            todolistName: e.currentTarget.value\n        })\n    }\n\n    activatedEditMode = () => {\n        this.setState({\n            editMode: true\n        })\n    }\n\n    deactivateEditMode = () => {\n        this.props.changeTodolist(this.state.todolistName)\n        this.setState({\n            editMode: false\n        })\n    }\n\n    render = () => {\n        return <div className={s.content}>\n            <div className={s.titleTodolist}>\n                {this.state.editMode\n                    ? <input onBlur={this.deactivateEditMode} onChange={this.onTodolistNameChanged} autoFocus={true}\n                             value={this.state.todolistName}/>\n                    : <div onClick={this.activatedEditMode}>\n                        <h3 className=\"todoList-header__title\">{this.props.title}\n\n                        </h3>\n                    </div>\n                }</div>\n            <button title='delete Todolist' onClick={this.props.onDelete}>X</button>\n        </div>\n    }\n}\n\nexport default TodoListTitle;\n\n","import React from 'react';\nimport '../App.css';\n\nclass AddNewItemForm extends React.Component {\n    state = {\n        error: false,\n        title: \"\"\n    }\n\n    onAddItemClick = () => {\n        let newText = this.state.title;\n        this.setState({title: \"\"});\n\n        if (newText === \"\") {\n            this.setState({error: true});\n        } else {\n            this.setState({error: false});\n            // передаём новый текст наружу\n            this.props.addItem(newText);\n        }\n    }\n\n    onTitleChanged = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    }\n\n    onKeyPress = (e) => {\n        if (e.key === \"Enter\") {\n            this.onAddItemClick();\n        }\n    }\n\n\n    render = () => {\n        let classNameForInput = this.state.error ? \"error\" : \"\";\n\n        return (\n            <div className=\"todoList-newTaskForm\">\n                <input className={classNameForInput} type=\"text\" placeholder=\"New item name\"\n                       onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress}\n                       value={this.state.title}\n                />\n                <button title={this.props.titleButton} onClick={this.onAddItemClick}>Add</button>\n            </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    headers: {\r\n        'API-KEY': '03b7c8a3-c090-4973-97f1-0b2f1558bdc8'\r\n    }\r\n})\r\n\r\n\r\nexport const api = {\r\n    addTask(newTaskTitle, todolistId) {\r\n        return instance.post(`todo-lists/${todolistId}/tasks`, {title: newTaskTitle})\r\n    },\r\n    addTodolist(title) {\r\n        return instance.post(`todo-lists`, {title})\r\n    },\r\n    getTodolists() {\r\n        return instance.get(`todo-lists`)\r\n    },\r\n    getTasks(id) {\r\n        return instance.get(`todo-lists/${id}/tasks`)\r\n    },\r\n    changeTask(todolistId, taskId, task, obj) {\r\n        return instance.put(`todo-lists/${todolistId}/tasks/${taskId}`, {...task, ...obj})\r\n    },\r\n    deleteTodolist(todolistId) {\r\n        return instance.delete(`todo-lists/${todolistId}`)\r\n    },\r\n    deleteTask(todolistId, taskId) {\r\n        return instance.delete(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    changeTodolist(title, todolistId) {\r\n        return instance.put(`todo-lists/${todolistId}`, title)\r\n    }\r\n}\r\n\r\n","import {api} from \"../common/api\";\r\n\r\nexport const ADD_TODOLIST = \"TodoList/Reducer/ADD-TODOLIST\";\r\nexport const DELETE_TODOLIST = \"TodoList/Reducer/DELETE-TODOLIST\";\r\nexport const DELETE_TASK = \"TodoList/Reducer/DELETE-TASK\";\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\r\nexport const UPDATE_TASK = \"TodoList/Reducer/UPDATE-TASK\";\r\nexport const SET_TODOLIST = \"TodoList/Reducer/SET-TODOLIST\";\r\nexport const SET_TASKS = \"TodoList/Reducer/SET-TASKS\";\r\nexport const UPDATE_TODOLIST = \"TodoList/Reducer/UPDATE_TODOLIST\";\r\n\r\nconst initialState = {\r\n    \"todolists\": []\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [action.newTodolist, ...state.todolists]\r\n            }\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id !== action.todolistId)\r\n            }\r\n        case SET_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n            }\r\n        case SET_TASKS:\r\n            debugger\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: action.tasks}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter(t => t.id !== action.taskId)\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case UPDATE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, title: action.todolistTitle}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map(t => {\r\n                                if (t.id !== action.task.id) {\r\n                                    return t;\r\n                                } else {\r\n                                    return {...t, ...action.obj};\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n    }\r\n    console.log(\"reducer: \", action);\r\n    return state;\r\n}\r\n\r\nconst updateTaskac = (task, obj, todolistId) => ({type: UPDATE_TASK, task, obj, todolistId})\r\nconst updateTodolistac = (todolistTitle, todolistId) => ({type: UPDATE_TODOLIST, todolistTitle, todolistId})\r\nconst deleteTodolistac = (todolistId) => ({type: DELETE_TODOLIST, todolistId})\r\nconst deleteTaskac = (todolistId, taskId) => ({type: DELETE_TASK, todolistId, taskId})\r\nconst addTaskac = (newTask, todolistId) => ({type: ADD_TASK, newTask, todolistId})\r\nconst setTodolistsac = (todolists) => ({type: SET_TODOLIST, todolists})\r\nconst setTasksac = (tasks, todolistId) => ({type: SET_TASKS, tasks, todolistId})\r\nconst addTodolistac = (newTodolist) => ({type: ADD_TODOLIST, newTodolist})\r\n\r\nexport const getTodoList = () => {\r\n    return (dispatch) => {\r\n        api.getTodolists().then(res => {\r\n            dispatch(setTodolistsac(res.data));\r\n        });\r\n    }\r\n}\r\n\r\nexport const addTodoList = (title) => {\r\n    return (dispatch) => {\r\n        api.addTodolist(title).then(res => {\r\n            let todolist = res.data.data.item;\r\n            dispatch(addTodolistac(todolist))\r\n        })\r\n    }\r\n}\r\n\r\nexport const getTasks = (id) => {\r\n    return (dispatch) => {\r\n        api.getTasks(id).then(res => {\r\n            let allTasks = res.data.items\r\n            dispatch(setTasksac(allTasks, id))\r\n        });\r\n    }\r\n}\r\n\r\nexport const addTaskT = (newText, id) => {\r\n    return (dispatch) => {\r\n        api.addTask(newText, id).then(res => {\r\n            let newTask = res.data.data.item;\r\n            dispatch(addTaskac(newTask, id));\r\n        })\r\n    }\r\n}\r\n\r\nexport const changeTaskTC = (task, obj, id, taskId) => {\r\n    return (dispatch) => {\r\n        api.changeTask(id, taskId, task, obj).then(res => {\r\n            dispatch(updateTaskac(res.data.data.item, obj, id));\r\n        })\r\n    }\r\n}\r\n\r\nexport const changeTodolist = (title, id) => {\r\n    return (dispatch) => {\r\n        api.changeTodolist(title, id).then(res => {\r\n            if(res.data.resultCode === 0){\r\n                dispatch(updateTodolistac(title, id))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteTodolist = (id) => {\r\n    return (dispatch) => {\r\n        api.deleteTodolist(id).then(() => {\r\n            dispatch(deleteTodolistac(id));\r\n        });\r\n    }\r\n}\r\n\r\nexport const deleteTask = (id, taskId) => {\r\n    return (dispatch) => {\r\n        api.deleteTask(id, taskId).then((res) => {\r\n            dispatch(deleteTaskac(id, taskId));\r\n        })\r\n}\r\n}\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport s from './Todolist.module.css';\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListTitle from \"./TodoListTitle\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTaskT, changeTaskTC, changeTodolist, deleteTask, deleteTodolist, getTasks} from \"../redux/reducer\";\n\n\nclass TodoList extends React.Component {\n\n    componentDidMount() {\n        debugger\n        this.props.getTasks(this.props.id)\n    }\n\n    state = {\n        filterValue: \"All\"\n    };\n\n    addTask = (newText) => {\n        this.props.addTaskT(newText, this.props.id)\n    }\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        });\n    }\n\n    changeTaskThis = (task, obj) => {\n        debugger\n        this.props.changeTaskTC(task, obj, this.props.id, task.id)\n    }\n\n    changeTodolist = (title) => {\n        this.props.changeTodolist(title, this.props.id)\n    }\n\n    changeStatus = (taskId, status) => {\n        this.changeTaskThis(taskId, {status});\n    }\n\n    changeTitle = (taskId, title) => {\n        this.changeTaskThis(taskId, {title});\n    }\n\n    deleteTodolist = () => {\n        this.props.deleteTodolist(this.props.id)\n    }\n\n    deleteTask = (taskId) => {\n        this.props.deleteTask(this.props.id, taskId)\n\n    }\n\n    render = () => {\n        let {tasks = []} = this.props;\n        return (\n            <div className={s.content}>\n                <div className=\"todoList-header\">\n                    <TodoListTitle onClick={this.activatedEditMode} title={this.props.title}\n                                         onDelete={this.deleteTodolist} changeTodolist={this.changeTodolist}/>\n                    <AddNewItemForm titleButton='Add task' addItem={this.addTask}/>\n\n                </div>\n                <div className={s.tasks}>\n                    <TodoListTasks changeStatus={this.changeStatus}\n                                   changeTitle={this.changeTitle}\n                                   deleteTask={this.deleteTask}\n                                   tasks={tasks.filter(t => {\n                                       if (this.state.filterValue === \"All\") {\n                                           return true;\n                                       }\n                                       if (this.state.filterValue === \"Active\") {\n                                           return t.status === 0;\n                                       }\n                                       if (this.state.filterValue === \"Completed\") {\n                                           return t.status === 2;\n                                       }\n                                   })}/></div>\n                <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\n            </div>\n        );\n    }\n}\n\nconst ConnectedTodolist =\n    connect(null, {addTaskT, getTasks, changeTaskTC, changeTodolist, deleteTodolist, deleteTask})\n    (TodoList);\n\nexport default ConnectedTodolist;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./components/TodoList\";\nimport AddNewItemForm from \"./components/AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTodoList, getTodoList} from \"./redux/reducer\";\n\nclass App extends React.Component {\n\n    addTodoList = (title) => {\n        this.props.addTodoList(title)\n    }\n\n    componentDidMount() {\n        this.props.getTodoList()\n    }\n\n    render = () => {\n        const todolists = this.props.todolists.map(tl => <TodoList id={tl.id} key={tl.id} title={tl.title} tasks={tl.tasks} />)\n\n        return (\n            <div className='content'>\n                <div className='header'>\n                    <AddNewItemForm titleButton='Add To Do List' addItem={this.addTodoList}/>\n                </div>\n                <div className=\"App\">\n                    {todolists}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        todolists: state.todolists\n    }\n}\n\nconst ConnectedApp = connect(mapStateToProps, {getTodoList, addTodoList})(App);\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware));\r\nwindow.store = store\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}