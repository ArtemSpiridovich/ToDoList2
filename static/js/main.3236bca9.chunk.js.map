{"version":3,"sources":["TodoListTask.js","TodoListTasks.js","TodoListFooter.js","TodoListTitle.js","AddNewItemForm.js","common/api.js","reducer.js","TodoList.js","App.js","serviceWorker.js","store.js","index.js"],"names":["TodoListTask","onIsDoneChanged","e","status","currentTarget","checked","_this","props","changeStatus","task","onTitleChanged","setState","title","value","state","editMode","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","deleteTask","id","render","containerCssClass","isDone","priority","react_default","a","createElement","className","type","onChange","onBlur","autoFocus","onClick","React","Component","TodoListTasks","tasksElements","tasks","map","src_TodoListTask","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","todolistName","onTodolistNameChanged","activatedEditMode","changeTodolist","onDelete","AddNewItemForm","error","onAddItemClick","newText","addItem","onKeyPress","key","classNameForInput","placeholder","instance","axios","withCredentials","baseURL","headers","API-KEY","api","newTaskTitle","todolistId","post","concat","get","taskId","obj","put","_objectSpread","delete","ADD_TASK","initialState","todolists","reducer","arguments","length","undefined","action","reducer_objectSpread","newTodolist","Object","toConsumableArray","filter","tl","t","newTask","todolistTitle","console","log","TodoList","addTask","newFilterValue","changeTaskThis","changeTaskTC","deleteTodolist","_this$props$tasks","src_TodoListTitle","src_AddNewItemForm","src_TodoListTasks","src_TodoListFooter","this","getTasks","ConnectedTodolist","connect","dispatch","then","res","data","item","addTaskac","allTasks","items","updateTaskac","resultCode","deleteTaskac","App","addTodoList","src_TodoList","getTodoList","ConnectedApp","todolist","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3236bca9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass TodoListTask extends React.Component {\n\n    onIsDoneChanged = (e) => {\n        let status = e.currentTarget.checked ? 2 : 0;\n        this.props.changeStatus(this.props.task, status);\n    }\n\n    onTitleChanged = (e) => {\n        this.setState({\n            title: e.currentTarget.value\n        })\n    }\n\n    state = {\n        editMode: false,\n        title: this.props.task.title\n    }\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    }\n\n    deactivateEditMode= () => {\n        this.props.changeTitle(this.props.task, this.state.title)\n        this.setState({editMode: false});\n    }\n    onDeleteTask = () => {\n        this.props.deleteTask(this.props.task.id);\n    }\n    render = () => {\n        let containerCssClass = this.props.task.isDone ? \"todoList-task done\" : \"todoList-task\";\n        let priority = '';\n        switch (this.props.task.priority) {\n            case 0:\n                priority = 'Low';\n                break;\n            case 1:\n                priority = 'Middle';\n                break;\n            case 2:\n                priority = 'Hi';\n                break;\n            case 3:\n                priority = 'Urgently';\n                break;\n            case 4:\n                priority = 'Later';\n                break;\n        }\n        return (\n                <div className={containerCssClass}>\n                    <input type=\"checkbox\" checked={this.props.task.isDone}\n                           onChange={this.onIsDoneChanged}/>\n                    { this.state.editMode\n                        ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true} value={this.state.title} />\n                        : <span onClick={this.activateEditMode}>{this.props.task.id} - {this.props.task.title}</span>\n                    }, priority: {priority} <button onClick={this.onDeleteTask}>X</button>\n                </div>\n        );\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n\n        let tasksElements = this.props.tasks.map( task => <TodoListTask task={task}\n                                                                        changeStatus={this.props.changeStatus}\n                                                                        changeTitle={this.props.changeTitle}\n                                                                        deleteTask={this.props.deleteTask}\n                                                                        />);\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport '../src/App.css';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n        isHidden: false\n    }\n\n    onAllFilterClick = () => { this.props.changeFilter(\"All\"); }\n    onCompletedFilterClick = () => { this.props.changeFilter(\"Completed\"); }\n    onActiveFilterClick = () => { this.props.changeFilter(\"Active\"); }\n    onShowFiltersClick = () => { this.setState({isHidden: true}) }\n    onHideFiltersClick = () => { this.setState({isHidden: false}) }\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                { !this.state.isHidden && <div>\n                     <button onClick={ this.onAllFilterClick } className={classForAll}>All</button>\n                     <button onClick={ this.onCompletedFilterClick } className={classForCompleted}>Completed</button>\n                     <button onClick={ this.onActiveFilterClick } className={classForActive}>Active</button>\n                  </div>\n                }\n                { !this.state.isHidden && <span onClick={ this.onShowFiltersClick }>hide</span> }\n                { this.state.isHidden && <span onClick={ this.onHideFiltersClick }>show</span> }\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListTitle extends React.Component {\n\n    state = {\n        editMode: false,\n        todolistName: this.props.title\n    }\n\n    onTodolistNameChanged = (e) => {\n        this.setState({\n            todolistName: e.currentTarget.value\n        })\n    }\n\n    activatedEditMode = () => {\n        this.setState({\n            editMode: true\n        })\n    }\n\n    deactivateEditMode = () => {\n        this.props.changeTodolist(this.state.todolistName)\n        this.setState({\n            editMode: false\n        })\n    }\n\n    render = () => {\n        return <div>{this.state.editMode\n            ? <input onBlur={this.deactivateEditMode} onChange={this.onTodolistNameChanged} autoFocus={true}\n                     value={this.state.todolistName}/>\n            : <div onClick={this.activatedEditMode}>\n                <h3 className=\"todoList-header__title\">{this.props.title}\n\n                </h3>\n            </div>\n        }<button onClick={this.props.onDelete}>X</button></div>\n    }\n}\n\nexport default TodoListTitle;\n\n","import React from 'react';\nimport './App.css';\n\nclass AddNewItemForm extends React.Component {\n    state = {\n        error: false,\n        title: \"\"\n    }\n\n    onAddItemClick = () => {\n        let newText = this.state.title;\n        this.setState({title: \"\"});\n\n        if (newText === \"\") {\n            this.setState({error: true});\n        } else {\n            this.setState({error: false});\n            // передаём новый текст наружу\n            this.props.addItem(newText);\n        }\n    }\n\n    onTitleChanged = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    }\n\n    onKeyPress = (e) => {\n        if (e.key === \"Enter\") {\n            this.onAddItemClick();\n        }\n    }\n\n\n    render = () => {\n        let classNameForInput = this.state.error ? \"error\" : \"\";\n\n        return (\n            <div className=\"todoList-newTaskForm\">\n                <input className={classNameForInput} type=\"text\" placeholder=\"New item name\"\n                       onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress}\n                       value={this.state.title}\n                />\n                <button onClick={this.onAddItemClick}>Add</button>\n            </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.1/`,\r\n    headers: {\r\n        'API-KEY': '03b7c8a3-c090-4973-97f1-0b2f1558bdc8'\r\n    }\r\n})\r\n\r\n\r\nexport const api = {\r\n    addTask(newTaskTitle, todolistId) {\r\n        return instance.post(`todo-lists/${todolistId}/tasks`, {title: newTaskTitle})\r\n    },\r\n    addTodolist(title) {\r\n        return instance.post(`todo-lists`, {title})\r\n    },\r\n    getTodolists() {\r\n        return instance.get(`todo-lists`)\r\n    },\r\n    getTasks(id) {\r\n        return instance.get(`todo-lists/${id}/tasks`)\r\n    },\r\n    changeTask(todolistId, taskId, task, obj) {\r\n        return instance.put(`todo-lists/${todolistId}/tasks/${taskId}`, {...task, ...obj})\r\n    },\r\n    deleteTodolist(todolistId) {\r\n        return instance.delete(`todo-lists/${todolistId}`)\r\n    },\r\n    deleteTask(todolistId, taskId) {\r\n        return instance.delete(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    changeTodolist(title, todolistId) {\r\n        return instance.put(`todo-lists/${todolistId}`, title)\r\n    }\r\n}\r\n\r\n","import {api} from \"./common/api\";\r\n\r\nexport const ADD_TODOLIST = \"TodoList/Reducer/ADD-TODOLIST\";\r\nexport const DELETE_TODOLIST = \"TodoList/Reducer/DELETE-TODOLIST\";\r\nexport const DELETE_TASK = \"TodoList/Reducer/DELETE-TASK\";\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\r\nexport const UPDATE_TASK = \"TodoList/Reducer/UPDATE-TASK\";\r\nexport const SET_TODOLIST = \"TodoList/Reducer/SET-TODOLIST\";\r\nexport const SET_TASKS = \"TodoList/Reducer/SET-TASKS\";\r\nexport const UPDATE_TODOLIST = \"TodoList/Reducer/UPDATE_TODOLIST\";\r\n\r\nconst initialState = {\r\n    \"todolists\": [\r\n        //     {\r\n        //         \"id\": 0, \"title\": \"every day\",\r\n        //         tasks: [\r\n        //             {\"title\": \"css11\", \"isDone\": false, \"priority\": \"low\", \"id\": 0},\r\n        //             {\"title\": \"js\", \"isDone\": false, \"priority\": \"low\", \"id\": 1},\r\n        //             {\"title\": \"react\", \"isDone\": false, \"priority\": \"low\", \"id\": 2},\r\n        //             {\"title\": \"sasasa\", \"isDone\": false, \"priority\": \"low\", \"id\": 3},\r\n        //             {\"title\": \"yoaa\", \"isDone\": false, \"priority\": \"low\", \"id\": 4},\r\n        //             {\"title\": \"sddsdsds\", \"isDone\": false, \"priority\": \"low\", \"id\": 5}]\r\n        //     },\r\n        //     {\"id\": 1, \"title\": \"tomorrow\", tasks: []},\r\n        //     {\"id\": 2, \"title\": \"weewwe`\", tasks: []},\r\n        //     {\"id\": 3, \"title\": \"dddd\", tasks: []}\r\n    ]\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            debugger\r\n            return {\r\n                ...state,\r\n                todolists: [action.newTodolist, ...state.todolists]\r\n            }\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id !== action.todolistId)\r\n            }\r\n        case SET_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n            }\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: action.tasks}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter(t => t.id !== action.taskId)\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case UPDATE_TODOLIST:\r\n\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    debugger\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, title: action.todolistTitle}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map(t => {\r\n                                if (t.id !== action.task.id) {\r\n                                    return t;\r\n                                } else {\r\n                                    return {...t, ...action.obj};\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n    }\r\n    console.log(\"reducer: \", action);\r\n    return state;\r\n}\r\n\r\nconst updateTaskac = (task, obj, todolistId) => ({type: UPDATE_TASK, task, obj, todolistId})\r\nconst updateTodolistac = (todolistTitle, todolistId) => ({type: UPDATE_TODOLIST, todolistTitle, todolistId})\r\nconst deleteTodolistac = (todolistId) => ({type: DELETE_TODOLIST, todolistId})\r\nconst deleteTaskac = (todolistId, taskId) => ({type: DELETE_TASK, todolistId, taskId})\r\nconst addTaskac = (newTask, todolistId) => ({type: ADD_TASK, newTask, todolistId})\r\nconst setTodolistsac = (todolists) => ({type: SET_TODOLIST, todolists})\r\nconst setTasksac = (tasks, todolistId) => ({type: SET_TASKS, tasks, todolistId})\r\nconst addTodolistac = (newTodolist) => ({type: ADD_TODOLIST, newTodolist})\r\n\r\nexport const getTodoList = () => {\r\n    return (dispatch) => {\r\n        api.getTodolists().then(res => {\r\n            dispatch(setTodolistsac(res.data));\r\n        });\r\n    }\r\n}\r\n\r\nexport const addTodoList = (title) => {\r\n    return (dispatch) => {\r\n        api.addTodolist(title).then(res => {\r\n            let todolist = res.data.data.item;\r\n            dispatch(addTodolistac(todolist))\r\n        })\r\n    }\r\n}\r\n\r\nexport const getTasks = (id) => {\r\n    return (dispatch) => {\r\n        api.getTasks(id).then(res => {\r\n            let allTasks = res.data.items\r\n            dispatch(setTasksac(allTasks, id))\r\n        });\r\n    }\r\n}\r\n\r\nexport const addTask = (newText, id) => {\r\n    return (dispatch) => {\r\n        api.addTask(newText, id).then(res => {\r\n            let newTask = res.data.data.item;\r\n            dispatch(addTaskac(newTask, id));\r\n        })\r\n    }\r\n}\r\n\r\nexport const changeTaskTC = (task, obj, id, taskId) => {\r\n    return (dispatch) => {\r\n        api.changeTask(id, taskId, task, obj).then(res => {\r\n            dispatch(updateTaskac(res.data.data.item, obj, id));\r\n        })\r\n    }\r\n}\r\n\r\nexport const changeTodolist = (title, id) => {\r\n    return (dispatch) => {\r\n        api.changeTodolist(title, id).then(res => {\r\n            if(res.data.resultCode === 0){\r\n                dispatch(updateTodolistac(title, id))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteTodolist = (id) => {\r\n    return (dispatch) => {\r\n        api.deleteTodolist(id).then(() => {\r\n            dispatch(deleteTodolistac(id));\r\n        });\r\n    }\r\n}\r\n\r\nexport const deleteTask = (id, taskId) => {\r\n    return (dispatch) => {\r\n        api.deleteTask(id, taskId).then((res) => {\r\n            dispatch(deleteTaskac(id, taskId));\r\n        })\r\n}\r\n}\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport './App.css';\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListTitle from \"./TodoListTitle\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTask, changeTaskTC, changeTodolist, deleteTask, deleteTodolist, getTasks} from \"./reducer\";\n\n\nclass TodoList extends React.Component {\n\n    componentDidMount() {\n        this.props.getTasks(this.props.id)\n    }\n\n    state = {\n        filterValue: \"All\"\n    };\n\n    addTask = (newText) => {\n        this.props.addTask(newText, this.props.id)\n    }\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        });\n    }\n\n    changeTaskThis = (task, obj) => {\n        debugger\n        this.props.changeTaskTC(task, obj, this.props.id, task.id)\n    }\n\n    changeTodolist = (title) => {\n        this.props.changeTodolist(title, this.props.id)\n    }\n\n    changeStatus = (taskId, isDone) => {\n        this.changeTaskThis(taskId, {status: isDone});\n    }\n\n    changeTitle = (taskId, title) => {\n        this.changeTaskThis(taskId, {title: title});\n    }\n\n    deleteTodolist = () => {\n        this.props.deleteTodolist(this.props.id)\n    }\n\n    deleteTask = (taskId) => {\n        this.props.deleteTask(this.props.id, taskId)\n\n    }\n\n    render = () => {\n        let {tasks = []} = this.props;\n        return (\n            <div className=\"todoList\">\n                <div className=\"todoList-header\">\n                    <TodoListTitle onClick={this.activatedEditMode} title={this.props.title}\n                                         onDelete={this.deleteTodolist} changeTodolist={this.changeTodolist}/>\n                    <AddNewItemForm addItem={this.addTask}/>\n\n                </div>\n\n                <TodoListTasks changeStatus={this.changeStatus}\n                               changeTitle={this.changeTitle}\n                               deleteTask={this.deleteTask}\n                               tasks={tasks.filter(t => {\n                                   if (this.state.filterValue === \"All\") {\n                                       return true;\n                                   }\n                                   if (this.state.filterValue === \"Active\") {\n                                       return t.status === 0;\n                                   }\n                                   if (this.state.filterValue === \"Completed\") {\n                                       return t.status === 2;\n                                   }\n                               })}/>\n                <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\n            </div>\n        );\n    }\n}\n\nconst ConnectedTodolist =\n    connect(null, {addTask, getTasks, changeTaskTC, changeTodolist, deleteTodolist, deleteTask})\n    (TodoList);\n\nexport default ConnectedTodolist;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTodoList, getTodoList} from \"./reducer\";\n\nclass App extends React.Component {\n\n    addTodoList = (title) => {\n        this.props.addTodoList(title)\n    }\n\n    componentDidMount() {\n        this.props.getTodoList()\n    }\n\n    render = () => {\n        const todolists = this.props.todolists.map(tl => <TodoList id={tl.id} title={tl.title} tasks={tl.tasks} />)\n\n        return (\n            <div>\n                <div>\n                    <AddNewItemForm addItem={this.addTodoList}/>\n                </div>\n                <div className=\"App\">\n                    {todolists}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        todolists: state.todolists\n    }\n}\n\nconst ConnectedApp = connect(mapStateToProps, {getTodoList, addTodoList})(App);\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware));\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}